(package com.android.demo.notepad2)
(import android.content.content-values)
(import android.content.context)
(import android.database.cursor)
(import android.database.s-q-l-exception)
(import android.database.sqlite.s-q-lite-database)
(import android.database.sqlite.s-q-lite-open-helper)
(import android.util.log)
#|
  Simple notes database access helper class. Defines the basic CRUD operations
  for the notepad example, and gives the ability to list all notes as well as
  retrieve or modify a specific note.
  
  This has been improved from the first version of this tutorial through the
  addition of better error handling and also using returning a Cursor instead
  of using a collection of inner classes (which is less scalable and not
  recommended).
 |#

(defclass  notes-db-adapter ()
  ((+tag+ :final t 
          :visibility :private
          :allocation :class
          :initform "NotesDbAdapter")
   (+database-create+ :final t 
                      :visibility :private
                      :allocation :class 
                      :initform (+ "create table notes(_id integer"
                                   " primary key autoincrement, title text"
                                   " not null, body text not null);"))
   (+database-name+ :final t 
                    :visibility :private
                    :allocation :class
                    :initform "data")
   (+database-table+ :final t 
                     :visibility :private
                     :allocation :class
                     :initform "notes")
   (+database-version+ :final t 
                       :visibility :private
                       :allocation :class
                       :initform 2)

   (m-db-helper :type database-helper :visibility :private)
   (m-db :type s-q-lite-database :visibility :private)

   (m-ctx :type context :visibility :private :final t))
  (:body
   (defclass database-helper (s-q-lite-open-helper) ()
     (:visibility :private)
     (:static t)
     (:body 
      (defnew (context/context)
          (call-next-method context +database-name+ null +database-version+))
      
      (defmethod on-create ((this database-helper) (db s-q-lite-database))
        (exec-s-q-l db +database-create+))

      (defmethod on-upgrade ((this database-helper)
                             (db s-q-lite-database)
                             (old-version int)
                             (new-version int))
        (in (the log)
            (w +tag+ (concatenate 'string
                                  "Upgrading database from version "
                                  old-version
                                  "to "
                                  new-version
                                  ", which will destroy all old data")))
        (exec-s-q-l db (+ "DROP TABLE IF EXISTS " +database-table+))
        (on-create this db))))))


(defconstant +key-title+ "title")
(defconstant +key-body+ "body")
(defconstant +key-rowid+ "_id")

(defnew (context/context)
  "/**
 * Constructor - takes the context to allow the database to be
 * opened/created
 * 
 * @param ctx the Context within which to work
 */"
  (in this (setf m-ctx context)))


(defmethod open ((this notes-db-adapter)) :throws s-q-l-exception
  "/**
 * Open the notes database. If it cannot be opened, try to create a new
 * instance of the database. If it cannot be created, throw an exception to
 * signal the failure
 *
 * @return this (self reference, allowing this to be chained in an
 *        initialization call)
 * @throws SQLException if the database could be neither opened or created
 */"
  (in this
      (setf m-db-helper (new 'database-helper m-ctx)
            m-db (get-writable-database m-db-helper)))
  this)

(defmethod close ((this notes-db-adapter))
  (in this (close m-db-helper)))

(defmethod create-note ((this notes-db-adapter) (title string) (body string))
  "/**
 * Create a new note using the title and body provided. If the note is
 * successfully created return the new rowId for that note, otherwise return
 * a -1 to indicate failure.
 *  
 * @param title the title of the note
 * @param body the body of the note
 * @return rowId or -1 if failed
 */"
  (let ((initial-values (new 'content-values)))
    (put initial-values +key-title+ title)
    (put initial-values +key-body+ body)
    (in this (insert m-db +database-table+ null initial-values))))

(defmethod delete-note ((this notes-db-adapter) (row-id long))
  "/**
 * Delete the note with the given rowId
 * 
 * @param rowId id of note to delete
 * @return true if deleted, false otherwise
 */"
  (let ((where (concatenate 'string +key-rowid+ "=" row-id)))
    (in this (> (delete m-db +database-table+ where null) 0))))

(defmethod fetch-all-notes ((this notes-db-adapter))
  "/**
 * Return a Cursor over the list of all notes in the database
 * 
 * @return Cursor over all notes
 */"
  (let ((columns (vector +key-rowid+ +key-title+ +key-body+)))
    (in this (query m-db +database-table+ columns
                    null null null null null))))

(defmethod fetch-note ((this notes-db-adapter) (row-id long))
  "/**
 * Return a Cursor positioned at the note that matches the given rowId
 * 
 * @param rowId id of note to retrieve
 * @return Cursor positioned to matching note, if found
 * @throws SQLException if note could not be found/retrieved
 */"
  (let* ((columns (vector +key-rowid+ +key-title+ +key-body+))
         (where (concatenate 'string +key-rowid+ "=" row-id))
         (m-cursor (in this
                       (query m-db t +database-table+ columns where
                              null null null null null))))
    (when (not (null m-cursor))
      (move-to-first m-cursor))
    m-cursor))

(defmethod update-note ((this notes-db-adapter) (row-id long)
                       (title string) (body string))
  "/**
 * Update the note using the details provided. The note to be updated is
 * specified using the rowId, and it is altered to use the title and body
 * values passed in
 * 
 * @param rowId id of note to update
 * @param title value to set note title to
 * @param body value to set note body to
 * @return true if the note was successfully updated, false otherwise
 */"
  (let ((args (new 'content-values))
        (where (concatenate 'string +key-rowid+ "=" row-id)))
    (put args +key-title+ title)
    (put args +key-body+ body)
    (in this (> (update m-db +database-table+ args where null) 0))))